1 创建版本库
	Windows环境，打开GIT bash(linux命令)
	创建一个文件夹 ：“mkdir test”
	进入该文件夹   ：“cd test”
	初始化项目仓库 ：“git init”
	查看创建结果   ：“ls -a”

2 提交文件
	创建一个文件   ：“echo "first line">>readme.txt”
	加入到暂存区   ：“git add .”（.加入所有文件）
	提交到本地仓库 ：“git commit -m "first commit"”

3 修改文件
	修改一个文件   ：“echo "second line">>readme.txt”
	查看文件状态   ：“git status”
	加入到暂存区   ：“git add .”（.加入所有文件）
	提交到本地仓库 ：“git commit -m "second commit"”

4撤销修改
	未add的文件    ：“git checkout .”或“git checkout -- readme.txt”
	（ 
	   add后又修改，撤消后退回到add的状态，
	   无法再使用该方法退回到和版本库一致。
	 ）
	已add的文件    ：“git reset HEAD .”
	（
	   总结：先 git reset HEAD .，再git checkout .，即可彻底还原已add文件
	 ）

5版本回退
	查看日志       ：“git log”、“git reflog”
	退回一个版本   ：“git git reset --hard HEAD^”
	（如果当前为版本三，退回到版本二后，无法通过git log查看到版本三的日志）
	退回两个版本   ：“git git reset --hard HEAD^^”
	退回10个版本   ：“git git reset --hard HEAD~10”
	跳转到制定版本 ：“git reset --hard 3628164”
	（配合git reflog查看提交记录）


1 远程仓库

	本地SSH公私秘钥 ：“ssh-keygen -t rsa -C "674275470@qq.com"”
	  {
	    执行该命令后，一路回车即可
	    查看本地C:\Users\Administrator\.ssh目录下是否存在私钥id_rsa和公钥id_rsa.pub
	    登录GitHub，设置中增加SSH keys，添加公钥id_rsa.pub内容，然后创建一个repository（yazhou0514/learnGIT）
	  }
	将本地库与GitHub关联 ：“git remote add origin git@github.com:yazhou0514/learnGIT”
	  {
	    需在本地仓库下执行该命令，需要提前创建好git@github.com:yazhou0514/learnGIT
	  }
	将本地库推送到远程   ：“git push -u origin master”（第一次）
	                     ： “git push origin master”   （以后）
	  {
	    提示：Warning: Permanently added the RSA host key for IP address '192.30.255.112' to the list of known hosts.
	    将“192.30.255.112 github.com”加入到hosts文件解决
	    由于远程库是空的，第一次推送master分支时，加上-u参数，
	       Git不但会把本地的master分支内容推送到远程新的master分支，
	       还会把本地的master分支和远程的master分支关联起来，
	       在以后的推送或者拉取时就可以简化命令。（git push origin master）
	  }
	推荐，先在远程创建仓库，然后： “git clone git@github.com:yazhou0514/learnGIT.git”

	查看远程库信息  ： “git remote” 或 “git remote -v”


2 分支

说明：创建并切换到新分支后，HEAD便指向了新分支，其后的操作和在主分支一样；
      将新分支合并到master，可以理解为让master执行一遍新分支创建后的操作！
       
	查看分支    ： “git branch”
	创建分支    ： “git branch NameBranch”
	切换分支    ： “git checkout NameBranch”
	创建并切换  ： “git checkout -b NameBranch”
	{
	   -b：代表创建并切换到NameBranch”分支；
	}
	合并某分支到当前分支：“git merge NameBranch”
	{
	   先 git checkout master，再 git merge NameBranch
	   将 NameBranch合并到master
	}
	删除分支    ： “git branch -d NameBranch””

3 远程分支
	远程没有分支：
	    1 切换到本地非master分支 ： “git checkout -b NameBranch”
	    2 将新分支推送到远程     ： “git push origin NameBranch”
	
	远程有分支：
	    1 克隆远程仓库           ： “git clone git@github.com:yazhou0514/learnGIT.git”
	    2 查看分支               ： “git branch”
	    3 创建远程已有分支到本地 ： “git checkout -b NameBranch origin/NameBranch”
	    4 推送分支               ： “git push origin NameBranch”

	n 删除远程分支           ： “git push origin :NameBranch”（注意冒号）
	
4 冲突
	{
	  Auto-merging readme.txt
	  CONFLICT (content): Merge conflict in readme.txt
	  Automatic merge failed; fix conflicts and then commit the result.
	}
	1 先手动修改冲突文件，然后执行 add 、 commit 命令，冲突解决
	2 通过“git log --graph” “git log --graph --pretty=oneline --abbrev-commit”查看解决过程

5 远程协作
	1 假设同时修改远程NameBranch分支
	  {
	      “git clone git@github.com:yazhou0514/learnGIT.git”
	      “git checkout -b NameBranch origin/NameBranch”
	  }
	2 修改完成后，拉取最新内容 ： “git pull”
	  {
	      错误：There is no tracking information for the current branch.
	      处理：“git branch --set-upstream NameBranch origin/NameBranch”

	      错误：冲突
	      处理：正常解决冲突，然后commit
	  }
	3 推送分支 ： “git push origin NameBranch”

	



协作原则
1] 如果一个分支已经公开，就不应该重写、修改该分支的任何部分
2] 已经发布出去的代码不应该再执行 rebase
3] 建议使用 fork + pr(pull request) 协作开发


git rebase 和 git merge

相同：
    来将一个分支的更改并入另一个分支。

区别：
rebase(变基) ：将多个分支的log合并为一条
  是将一系列提交按照原有次序依次应用到另一分支上。
  示例：
    $ git checkout test
    $ git rebase master（变基为master，即master指向test的某个commit 或 使test是在当前master基础上进行commit）
    $ git checkout master
    $ git merge test    (将master移动到最新)

merge(合并)  ：保留每个分支的log
  是把最终结果合在一起
  示例：
     $ git checkout master（切换到master分支）
     $ git merge test     （将test分支合并到master，并隐含的为master新建一个快照，即master分支commit了一次和test的合并内容）

推荐：先rebase，如果有冲突，git rebase --abort，再换用merge~~
总的原则是，
  只对尚未推送或分享给别人的本地修改执行变基操作清理历史，
  从不对已推送至别处的提交执行变基操作，
这样，你才能享受到两种方式带来的便利。


